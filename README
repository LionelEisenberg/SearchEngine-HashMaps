README for Assignment n# 9
Lionel Eisenberg - leisenb5 - leisenb5@jhu.edu
Sanat Deshpande - sdeshpa4 - sdeshpa4@jhu.edu
600.226 Data Structures Spring 2017
Partner: YES.

===============================================================================

FILES: DIRECTORY AND FUNCTIONALITY:

 - HashMap.java:  HashMap implementation of the Map interface. This
                  implementation uses open addressing, more specifically
                  double probing to implement the HashMap.
 - HashMapBench.java: bench file for the HashMap. Feel free to change the size
 - HashMapTest.java: Junit Test file for our HashMap implementation.
 - HashMapV0: "Failed" HashMap implementation that used chaining.
 - JHUgle.java: main file to run JHUgle.java.
 - Map.java: Map interface.
 - MapBaseTest.java: Base junit file for Maps.
 - README: README for project
 - gitlog.txt: Details who made what contribution

===============================================================================

PROBLEMS TO SIGNAL:

We do brut force the findNextPrime() method and we are sure there must be a more
efficient way of calculating the next prime, however we saw that the time it
took to resize really didnt affect our results that much.

We looked at using the Sieve or Eratosthenes but again it seemed too extra
for the scope of this project

===============================================================================

OUR APPROACH:

We had two overall iterations of our hashmap. One that used open hashing
and one that used closed hashing. We decided that the open hashing approach
using chaining as a collision resolution policy would be the easiest to start
out with as a proof of concept. We implemented this using an array of
LinkedLists, each of which grew whenever a key was hashed to the that slot in
the array.
After this approach, we tried a closed hashing implementation using quadratic
probing. This was slightly trickier, but basically used an array of nodes
that grew every time our load factor exceeded 50%. We also made sure that
our array's size was always prime. This approach yielded much faster results
than the previous approach.
As for the JHUgle search engine, this was a fairly straightforward component
that required reading in the data files and mapping each keyword to a URL,
then properly parsing user instructions to search the table.

Please see our gitlog.txt for further details on individual roles and
contributions.

===============================================================================
